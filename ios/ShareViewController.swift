//
//  ShareViewController.swift
//  RNShareMenu
//
//  DO NOT EDIT THIS FILE. IT WILL BE OVERRIDEN BY NPM OR YARN.
//
//  Created by Gustavo Parreira on 26/07/2020.
//
//  Modified by Veselin Stoyanov on 17/04/2021.

import Foundation
import MobileCoreServices
import UIKit
import Social
import RNShareMenu

enum ShareViewControllerError: Error {
  case missingKey(key: String)
  case unknownGroup(name: String)
  case fileAccessError(debugDescription: String)
}

class ShareViewController: SLComposeServiceViewController {
  var sharedItems: [[String: String]] = []
  
  internal func getStringFromPlist(key: String) throws -> String {
    guard let entry = Bundle.main.object(forInfoDictionaryKey: key) as? String else {
      if #available(iOSApplicationExtension 14.0, *) {
        Logger().error("Error: You haven't defined '\(key)' in your Share Extension's Info.plist")
      }
      throw ShareViewControllerError.missingKey(key: key)
    }

    return entry
  }
  
  func getAppGroupName() throws -> String {
    do {
      return try getStringFromPlist(key: APP_GROUP_KEY)
    }
    catch {
      return try "group." + getStringFromPlist(key: HOST_APP_IDENTIFIER_INFO_PLIST_KEY)
    }
  }
  
  func getUrlScheme() throws -> String {
    return try getStringFromPlist(key: HOST_URL_SCHEME_INFO_PLIST_KEY)
  }
  
  func getUserDefaultsInstance() throws -> UserDefaults {
    let appGroup = try getAppGroupName()
    guard let userDefaults = UserDefaults(suiteName: appGroup) else {
      throw ShareViewControllerError.unknownGroup(name: appGroup)
    }

    return userDefaults
  }
  
  func getGroupFileManagerContainer() throws -> URL {
    let appGroup = try getAppGroupName()
    guard let groupFileManagerContainer = FileManager.default
            .containerURL(forSecurityApplicationGroupIdentifier: appGroup)
    else {
      throw ShareViewControllerError.unknownGroup(name: appGroup)
    }
    return groupFileManagerContainer
  }
  
    override func isContentValid() -> Bool {
        // Do validation of contentText and/or NSExtensionContext attachments here
        return true
    }

    override func didSelectPost() {
        // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
      guard let items = extensionContext?.inputItems as? [NSExtensionItem] else {
        cancelRequest()
        return
      }

      handlePost(items)
    }

    override func configurationItems() -> [Any]! {
        // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.
        return []
    }

  func handlePost(_ items: [NSExtensionItem], extraData: [String:Any]? = nil) {
    DispatchQueue.global().async {
      do {
        let userDefaults = try self.getUserDefaultsInstance()
        
        if let data = extraData {
          try self.storeExtraData(data)
        } else {
          try self.removeExtraData()
        }
        
        let semaphore = DispatchSemaphore(value: 0)
        
        for item in items {
          guard let attachments = item.attachments else {
            self.cancelRequest()
            return
          }
          
          for provider in attachments {
            if provider.isText {
              self.storeText(withProvider: provider, semaphore)
            } else if provider.isURL {
              self.storeUrl(withProvider: provider, semaphore)
            } else {
              self.storeFile(withProvider: provider, semaphore)
            }
            
            semaphore.wait()
          }
          
        }

        userDefaults.set(self.sharedItems, forKey: USER_DEFAULTS_KEY)
        userDefaults.synchronize()

        try self.openHostApp()
      }
      catch {
        self.extensionContext!.cancelRequest(withError: error)
      }
    }
  }

  func storeExtraData(_ data: [String:Any]) throws {
    let userDefaults = try self.getUserDefaultsInstance()
    userDefaults.set(data, forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }

  func removeExtraData() throws {
    let userDefaults = try self.getUserDefaultsInstance()
    userDefaults.removeObject(forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }
  
  func storeText(withProvider provider: NSItemProvider, _ semaphore: DispatchSemaphore) {
    provider.loadItem(forTypeIdentifier: kUTTypeText as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let text = data as? String else {
        self.exit(withError: COULD_NOT_FIND_STRING_ERROR)
        return
      }
      
      self.sharedItems.append([DATA_KEY: text, MIME_TYPE_KEY: "text/plain"])
      semaphore.signal()
    }
  }
  
  func storeUrl(withProvider provider: NSItemProvider, _ semaphore: DispatchSemaphore) {
    provider.loadItem(forTypeIdentifier: kUTTypeURL as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        self.exit(withError: COULD_NOT_FIND_URL_ERROR)
        return
      }
      
      self.sharedItems.append([DATA_KEY: url.absoluteString, MIME_TYPE_KEY: "text/plain"])
      semaphore.signal()
    }
  }
  
  func storeFile(withProvider provider: NSItemProvider, _ semaphore: DispatchSemaphore) {
    provider.loadItem(forTypeIdentifier: kUTTypeData as String, options: nil) { (data, error) in
      do {
        guard (error == nil) else {
          throw ShareViewControllerError.fileAccessError(debugDescription: error.debugDescription)
        }
        guard let url = data as? URL else {
          throw ShareViewControllerError.fileAccessError(debugDescription: COULD_NOT_FIND_IMG_ERROR)
        }

        let groupFileManagerContainer = try self.getGroupFileManagerContainer()
        let mimeType = url.extractMimeType()
        let fileExtension = url.pathExtension
        let fileName = UUID().uuidString
        let filePath = groupFileManagerContainer
          .appendingPathComponent("\(fileName).\(fileExtension)")
        
        try self.moveFileToDisk(from: url, to: filePath)
        self.sharedItems.append([DATA_KEY: filePath.absoluteString, MIME_TYPE_KEY: mimeType])
        semaphore.signal()
      }
      catch {
        self.extensionContext!.cancelRequest(withError: error)
      }
    }
  }

  func moveFileToDisk(from srcUrl: URL, to destUrl: URL) throws {
    if FileManager.default.fileExists(atPath: destUrl.path) {
      try FileManager.default.removeItem(at: destUrl)
    }
    try FileManager.default.copyItem(at: srcUrl, to: destUrl)
  }
  
  func exit(withError error: String) {
    print("Error: \(error)")
    cancelRequest()
  }
  
  internal func getHostAppUrl() throws -> URL? {
    let urlScheme = try self.getUrlScheme()
    if !urlScheme.hasSuffix("://") {
      return URL(string: urlScheme + "://")
    }
    
    return URL(string: urlScheme)
  }
  
  internal func openHostApp() throws {
    let url = try getHostAppUrl()
    let selectorOpenURL = sel_registerName("openURL:")
    var responder: UIResponder? = self
    
    while responder != nil {
      if responder?.responds(to: selectorOpenURL) == true {
        responder?.perform(selectorOpenURL, with: url)
      }
      responder = responder!.next
    }
    
    completeRequest()
  }
  
  func completeRequest() {
    // Inform the host that we're done, so it un-blocks its UI. Note: Alternatively you could call super's -didSelectPost, which will similarly complete the extension context.
    extensionContext!.completeRequest(returningItems: [], completionHandler: nil)
  }
  
  func cancelRequest() {
    extensionContext!.cancelRequest(withError: NSError())
  }

}
